package poopgame.gamelogic.systems;

import com.badlogic.ashley.core.Engine;
import com.badlogic.ashley.core.Entity;
import com.badlogic.ashley.core.EntitySystem;
import com.badlogic.ashley.core.Family;
import com.badlogic.ashley.utils.ImmutableArray;

import poopgame.gamelogic.Stats;
import poopgame.gamelogic.components.PlayerComponent;
import poopgame.gamelogic.components.StatsComponent;
import poopgame.gamelogic.components.UpdateComponent;
import poopgame.gamelogic.engine.LogicSystem;
import poopgame.gamelogic.engine.TimeEngine;

public class WinSystem extends EntitySystem implements LogicSystem {

    private static final float STEP_TIME = 1/45f;

	private ImmutableArray<Entity> playerEntites;

    private float accumulator = 0f;

	@Override
	public void addedToEngine (Engine engine) {
		playerEntites = engine.getEntitiesFor(Family.all(PlayerComponent.class, StatsComponent.class).get());
	}

	@Override
	public void removedFromEngine (Engine engine) {
		playerEntites = null;
	}

    @Override
    public void update(float deltaTime) {
        accumulator += deltaTime;
        while (accumulator >= STEP_TIME) {
            accumulator -= STEP_TIME;
        	step();
        }
    }
    
    private void step() {
    	int playerCount = 0;
    	Entity winner = null;
    	for (Entity entity : playerEntites) {
    		Stats stats = entity.getComponent(StatsComponent.class).stats;
    		if (stats.getHealth() > 0) {
    			playerCount++;
    			winner = 
    		}
    	}
    }

	@Override
	public Float storeState() {
		return accumulator;
	}

	@Override
	public void loadState(Object state) {
		accumulator = (Float) state;
	}

}
