package poopgame.util;

import java.util.HashMap;
import java.util.Map;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.graphics.Pixmap.Format;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.TextureRegion;

public class InternalAssetLoader {
	
	private static final Map<String, Sound> SOUNDS = new HashMap<>();

	
	public static Sound getSound(String path){
		try {
			return Gdx.audio.newSound(Gdx.files.internal(path));
		} catch(Throwable e) {
			return new EmptySound();
		}
	}
	
	public static TextureRegion getTexture(String path){
		try {
			return new TextureRegion(new Texture(path));
		} catch(Throwable e) {
			return new TextureRegion(new Texture(generateFailureImage()));
		}
	}
	
	private static Pixmap generateFailureImage(){
		Pixmap failureImage = generateColoredImage(Color.WHITE, 100, 100);
		failureImage.setColor(Color.RED);
		failureImage.drawRectangle(0, 0, 100, 100);
		failureImage.drawLine(0, 0, 100, 100);
		failureImage.drawLine(0, 100, 100, 0);
		return failureImage;
	}
	
	public static Pixmap generateColoredImage(Color color, int width, int height){
		Pixmap image = new Pixmap(width, height, Format.RGB888);
		image.setColor(color);
		image.fill();
		return image;
	}
	
	
	private static class EmptySound implements Sound {

		@Override
		public long play() {
			// empty implementation
			return 0;
		}

		@Override
		public long play(float volume) {
			// empty implementation
			return 0;
		}

		@Override
		public long play(float volume, float pitch, float pan) {
			// empty implementation
			return 0;
		}

		@Override
		public long loop() {
			// empty implementation
			return 0;
		}

		@Override
		public long loop(float volume) {
			// empty implementation
			return 0;
		}

		@Override
		public long loop(float volume, float pitch, float pan) {
			// empty implementation
			return 0;
		}

		@Override
		public void stop() {
			// empty implementation
			
		}

		@Override
		public void pause() {
			// empty implementation
			
		}

		@Override
		public void resume() {
			// empty implementation
			
		}

		@Override
		public void dispose() {
			// empty implementation
			
		}

		@Override
		public void stop(long soundId) {
			// empty implementation
			
		}

		@Override
		public void pause(long soundId) {
			// empty implementation
			
		}

		@Override
		public void resume(long soundId) {
			// empty implementation
			
		}

		@Override
		public void setLooping(long soundId, boolean looping) {
			// empty implementation
			
		}

		@Override
		public void setPitch(long soundId, float pitch) {
			// empty implementation
			
		}

		@Override
		public void setVolume(long soundId, float volume) {
			// empty implementation
			
		}

		@Override
		public void setPan(long soundId, float pan, float volume) {
			// empty implementation
			
		}
		
	}
	
}
