package poopgame.gamelogic;

import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Fixture;

import poopgame.physics.BodyInfo;
import poopgame.util.InternalAssetLoader;

public class Poop extends GameEntity {
	
	protected Player pooper;
	protected Sound sound = InternalAssetLoader.getSound("poopsound.mp3");
	
	public Poop(Player pooper) {
		super(0.5f, 0.5f, true);
		this.pooper = pooper;
	}
	
	public void create(PoopGame game) {
		create(game, true, sound);
	}
	
	public void create(PoopGame game, boolean physics, Sound sound) {
		super.create(game);
		if(physics) body.setLinearVelocity(pooper.body.getLinearVelocity().scl(1.5f));
		
		//Play poop sound
		if(sound != null) sound.play();
	}

	@Override
	public void update(float delta) {
		if(!alive) return;
		for(Fixture colliding : fixInfo.colliding.values()) {
			BodyInfo collidingInfo = (BodyInfo) colliding.getBody().getUserData();
			if(collidingInfo.origin instanceof Player && collidingInfo.origin != pooper) {
				if(isCollidingTargetValid(colliding)) {
					onConfirmedCollision(collidingInfo);
				}
			}
		}
		
		if(body.getPosition().y < -height) {
			destroy();
		}
		
		Vector2 position = body.getPosition();
		
		//wrap around
		float maxX = game.tiledMapCollision.getMapDimensions().x;
		if(position.x < 0) body.setTransform(maxX, position.y, 0);
		else if(position.x > maxX) body.setTransform(0, position.y, 0);
	}
	
	protected void onConfirmedCollision(BodyInfo collidingWith) {
		((Player) collidingWith.origin).die();
		destroy();
	}

	@Override
	protected String getTextureName() {
		return "poop.png";
	}

	@Override
	protected Vector2 getSpawnPosition() {
		Vector2 position = pooper.body.getPosition();
		position.x -= pooper.width / 2;
		position.x -= 
		return  
	}
	
	protected boolean isCollidingTargetValid(Fixture colliding) {
		return colliding.getShape().getRadius() * 2 + colliding.getBody().getPosition().y < fixInfo.fixture.getShape().getRadius() * 2 + body.getPosition().y;
	}
}
