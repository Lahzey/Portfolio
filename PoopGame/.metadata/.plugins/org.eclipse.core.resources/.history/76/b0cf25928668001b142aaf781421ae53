package poopgame.ui;

import java.awt.AWTEvent;
import java.awt.event.AWTEventListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.HashSet;
import java.util.Set;

import poopgame.gamelogic.engine.actions.Action;
import poopgame.gamelogic.engine.actions.ActionType;

public abstract class InputProcessor implements AWTEventListener {

	// to prevent multiple firing of events when holding a key for too long
	private Set<Integer> currentlyPressedKeys = new HashSet<>();
	private Set<Integer> currentlyPressedMouseButtons = new HashSet<>();

	@Override
	public void eventDispatched(AWTEvent event) {
		if (event.getID() == MouseEvent.MOUSE_PRESSED) {
			MouseEvent mouseEvent = (MouseEvent) event;
			int mouseButton = mouseEvent.getButton();
			if (!currentlyPressedMouseButtons.contains(mouseButton)) {
				currentlyPressedMouseButtons.add(mouseButton);
				
				ActionType actionType = activePlayer.getInputMap().getMouseMapping(mouseButton);
				if (actionType != null) {
					Action action = new Action(actionType, activePlayer);
					activePlayer.executeAction(action, engine);
				}
			}
		} else if (event.getID() == MouseEvent.MOUSE_RELEASED) {
			MouseEvent mouseEvent = (MouseEvent) event;
			int mouseButton = mouseEvent.getButton();
			if (currentlyPressedMouseButtons.contains(mouseButton)) {
				currentlyPressedMouseButtons.remove(mouseButton);
				
				ActionType actionType = activePlayer.getInputMap().getMouseMapping(mouseButton);
				if (actionType == ActionType.MOVE_LEFT_START) {
					actionType = ActionType.MOVE_LEFT_END;
				} else if (actionType == ActionType.MOVE_RIGHT_START) {
					actionType = ActionType.MOVE_RIGHT_END;
				} else if (actionType == ActionType.POOP_START) {
					actionType = ActionType.POOP_END;
				} else {
					return; // this action type has no start-end processing
				}
				Action action = new Action(actionType, activePlayer);
				activePlayer.executeAction(action, engine);
			}
		} else if (event.getID() == KeyEvent.KEY_PRESSED) {
			KeyEvent keyEvent = (KeyEvent) event;
			int keyCode = keyEvent.getKeyCode();
			if (!currentlyPressedKeys.contains(keyCode)) {
				currentlyPressedKeys.add(keyCode);
				
				ActionType actionType = activePlayer.getInputMap().getKeyMapping(keyCode);
				if (actionType != null) {
					Action action = new Action(actionType, activePlayer);
					activePlayer.executeAction(action, engine);
				}
			}
		} else if (event.getID() == KeyEvent.KEY_RELEASED) {
			KeyEvent keyEvent = (KeyEvent) event;
			int keyCode = keyEvent.getKeyCode();
			if (currentlyPressedKeys.contains(keyCode)) {
				currentlyPressedKeys.remove(keyCode);
				
				ActionType actionType = activePlayer.getInputMap().getKeyMapping(keyCode);
				if (actionType == ActionType.MOVE_LEFT_START) {
					actionType = ActionType.MOVE_LEFT_END;
				} else if (actionType == ActionType.MOVE_RIGHT_START) {
					actionType = ActionType.MOVE_RIGHT_END;
				} else if (actionType == ActionType.POOP_START) {
					actionType = ActionType.POOP_END;
				} else {
					return; // this action type has no start-end processing
				}
				Action action = new Action(actionType, activePlayer);
				activePlayer.executeAction(action, engine);
			}
		}
	}
	
	
	public abstract void mousePressed(int mouseButton);
	public abstract void mouseReleased(int mouseButton);
	public abstract void keyPressed(int keyCode);
	public abstract void keyReleased(int keyCode);
	
}
