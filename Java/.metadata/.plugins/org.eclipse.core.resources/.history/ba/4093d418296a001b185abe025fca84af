package poopgame.gamelogic;

import com.badlogic.ashley.core.Entity;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.Fixture;

import poopgame.gamelogic.components.IdComponent;
import poopgame.gamelogic.components.UpdateComponent;
import poopgame.gamelogic.engine.TimeEngine;
import poopgame.physics.BodyInfo;
import poopgame.physics.FixtureInfo;
import poopgame.util.InternalAssetLoader;

public class Poop extends GameEntity {

	private static final float WIDTH = 0.5f;
	private static final float HEIGHT = 0.5f;

	protected static final String DAMAGE_AMP = "damageAmp";
	protected static final String SECONDS_IN_AIR = "secondsInAir";

	private static final Sound SOUND = InternalAssetLoader.getSound("poopsound.mp3");

	protected Entity pooper;

	public Poop(Entity pooper) {
		super(WIDTH, HEIGHT, true);
	}

	@Override
	public String generateId() {
		return generateChildId(pooper, getClass().getSimpleName());
	}

	@Override
	public Entity create(TimeEngine engine, Vector2 position) {
		return create(engine, position, true, SOUND);
	}

	public Entity create(TimeEngine engine, Vector2 position, boolean physics, Sound sound) {
		Entity poop = super.create(engine, position);
		poop.add(new UpdateComponent(Poop.class));
		
		if (physics) getBody(poop).setLinearVelocity(getBody(pooper).getLinearVelocity().cpy().scl(1.5f));

		getStats(pooper).setOwnerId(getId(pooper));
		getStats(poop).setDamage(getStats(pooper).getDamage());
		getStats(poop).setStat(DAMAGE_AMP, 5);
		getStats(poop).setStat(SECONDS_IN_AIR, 0);

		// Play poop sound
		if (sound != null) sound.play();

		return poop;
	}

	// Called by UpdateComponent
	public static void update(TimeEngine engine, Entity entity, float delta) {
		Stats stats = getStats(entity);

		float secondsInAir = stats.getStat(SECONDS_IN_AIR, Float.class) + delta;
		getStats(entity).setStat(SECONDS_IN_AIR, secondsInAir);
		
		Body body = getBody(entity);
		FixtureInfo fixInfo = (FixtureInfo) ((BodyInfo) body.getUserData()).mainFixture.getUserData();
		String ownerId = getStats(entity).getOwnerId();
		
		for (Fixture colliding : fixInfo.colliding.values()) {
			BodyInfo collidingInfo = (BodyInfo) colliding.getBody().getUserData();
			if (collidingInfo.origin instanceof Player) {
				String id = collidingInfo.entity.getComponent(IdComponent.class).id;
				if (!ownerId.equals(id)) {
					onConfirmedCollision((Player) collidingInfo.origin);
				}
			}
		}

		if (body.getPosition().y < -HEIGHT) {
			destroy();
		}

		Vector2 position = body.getPosition();

		// wrap around
		float maxX = game.tiledMapCollision.getMapDimensions().x;
		if (position.x < 0) body.setTransform(maxX, position.y, 0);
		else if (position.x > maxX) body.setTransform(0, position.y, 0);
	}

	private static void onConfirmedCollision(Player target) {
		destroy();
		int damage = (int) (this.damage * (1 + (secondsInAir * damageAmpPerSec)));
		target.getStats().setHealth(target.getStats().getHealth() - damage);
	}

	@Override
	protected String getTextureName() {
		return "poop.png";
	}
}
