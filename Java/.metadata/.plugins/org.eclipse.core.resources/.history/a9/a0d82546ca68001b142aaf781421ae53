package poopgame.gamelogic;

import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.CircleShape;
import com.badlogic.gdx.physics.box2d.Fixture;
import com.badlogic.gdx.physics.box2d.Shape;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;

import poopgame.physics.BodyInfo;

public class AtomicPoop extends Poop{
	
	private Runnable detonationCallback;

	public AtomicPoop(Player pooper, Runnable detonationCallback) {
		super(pooper);
		this.detonationCallback = detonationCallback;
		damageAmpPerSec = 0;
		damage = 10000000000000;
	}
	
	@Override
	public String getTextureName() {
		return Champion.KIM.getFolderName() + "special/atomicpoop.png";
	}
	
	protected boolean isCollidingTargetValid(Fixture colliding) {
		return true;
	}
	
	public void detonate() {
		destroy();
		new AtomicWaste().create(game);
		detonationCallback.run();
	}
	
	@Override
	public void update(float delta) {
		super.update(delta);
		if(!alive) {
			detonationCallback.run();
		}
	}
	
	@Override
	protected void onConfirmedCollision(Player player) {
		detonate();
	}
	
	
	private class AtomicWaste extends GameEntity{

		private static final float minDiameter = 0.5f;
		private static final float maxDiameter = 5f;
		
		private long duration = 7000;
		private long expandDuration = 1000;
		private long spawnedAt;
		
		public AtomicWaste() {
			super(minDiameter, minDiameter, true);
		}
		
		public void create(PoopGame game) {
			super.create(game);
			spawnedAt = System.currentTimeMillis();
		}

		@Override
		public void update(float delta) {
			long current = System.currentTimeMillis();
			for(Fixture colliding : fixInfo.colliding.values()) {
				BodyInfo collidingInfo = (BodyInfo) colliding.getBody().getUserData();
				if(collidingInfo.origin instanceof Player) {
					((Player) collidingInfo.origin).die();
				}
			}
			
			if(current - spawnedAt > duration) {
				destroy();
			}
			
			CircleShape shape = (CircleShape) fixInfo.fixture.getShape();
			double progress = Math.min(1, ((double)current - spawnedAt) / expandDuration);
			float diameter = (float) (minDiameter + (maxDiameter - minDiameter) * progress);
			shape.setRadius(diameter / 2);
			fixInfo.width = diameter;
			fixInfo.height = diameter;
			body.setTransform(body.getPosition().add(0, 10 * delta / (duration / 1000)), 0);
		}
		
		@Override
		protected Shape getShape() {
			CircleShape shape = new CircleShape();
			shape.setRadius(minDiameter / 2);
			return shape;
		}

		@Override
		protected String getTextureName() {
			return "atomicwaste.png";
		}

		@Override
		protected Vector2 getSpawnPosition() {
			return AtomicPoop.this.body.getPosition();
		}
		
		@Override
		protected BodyDef getBodyDef() {
			BodyDef bodyDef = super.getBodyDef();
			bodyDef.type = BodyType.StaticBody;
			return bodyDef;
		}
	}

}
