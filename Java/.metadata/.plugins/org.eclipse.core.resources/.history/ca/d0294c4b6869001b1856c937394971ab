package poopgame.server;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.creditsuisse.util.GeneralListener;
import com.creditsuisse.util.LoopThread;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import com.esotericsoftware.kryonet.Server;

import poopgame.gamelogic.Arena;
import poopgame.gamelogic.Player;
import poopgame.gamelogic.PoopGame;
import poopgame.gamelogic.engine.actions.Action;

public class LocalServer extends Listener implements GameServer {
	
	private Server server = new Server();
	
	private Arena arena = Arena.SEWER;
	private Map<Long, Player> playerMap = new HashMap<Long, Player>();
	private List<Player> players = new ArrayList<>(); // just to keep the players the order they joined in

	private long startTime = 0;
	
	private List<GeneralListener> lobbyUpdateListeners = new ArrayList<>();
	private List<ActionReceiver> actionReceivers = new ArrayList<>();
	
	private LoopThread stateUpdateSender;
	
	public LocalServer() {
		try {
			server.start();
			server.bind(TCP_PORT, UDP_PORT);
			server.addListener(this);
		    RequestRegister.registerAll(server.getKryo());
		} catch (IOException e) {
			throw new RuntimeException("Failed to start local server.", e);
		}
		
		stateUpdateSender = new LoopThread() {
			
			@Override
			public void loopedRun() {
				// TODO Auto-generated method stub
				
			}
		};
	}
	
	@Override
	public Arena getArena() {
		return arena;
	}
	
	public void setArena(Arena arena) {
		this.arena = arena;
		sendLobbyUpdate();
	}

	@Override
	public Player[] getPlayers() {
		return players.toArray(new Player[players.size()]);
	}

	@Override
	public void addPlayer(Player player) {
		players.add(player);
		playerMap.put(player.getId(), player);
		sendLobbyUpdate();
	}

	public void removePlayer(long playerId) {
		Player removedPlayer = playerMap.remove(playerId);
		if (removedPlayer != null) {
			players.remove(removedPlayer);
		}
		sendLobbyUpdate();
	}
	
	private void sendLobbyUpdate() {
		JoinRequest[] joinedPlayers = new JoinRequest[players.size()];
		for (int i = 0; i < players.size(); i++) {
			Player joinedPlayer = players.get(i);
			joinedPlayers[i] = new JoinRequest(joinedPlayer.getId(), joinedPlayer.getName(), joinedPlayer.getChampion());
		}
		LobbyUpdate lobbyUpdate = new LobbyUpdate(arena, joinedPlayers);
		
		for (Connection connection : server.getConnections()) {
			connection.sendTCP(lobbyUpdate);
		}
		
		for (GeneralListener lobbyUpdateListener : lobbyUpdateListeners) {
			lobbyUpdateListener.actionPerformed();
		}
	}
	
	@Override
	public long getStartTime() {
		return startTime;
	}

	public void startLobby() {
		startTime = System.currentTimeMillis();
		
		StartSignal startSignal = new StartSignal(startTime);
		for (Connection connection : server.getConnections()) {
			connection.sendTCP(startSignal);
		}
	}

	@Override
	public void dispatchAction(ActionRequest actionRequest) {
		PoopGame.getInstance().executeAfterNextUpdate(() -> {
			Action action = new Action(actionRequest.actionId, actionRequest.actionType, playerMap.get(actionRequest.playerId), actionRequest.actionTime);
			for (ActionReceiver actionReceiver : actionReceivers) {
				actionReceiver.receive(action);
			}
			
			actionRequest.actionTime = action.getActionTime();
			for (Connection connection : server.getConnections()) {
				connection.sendTCP(actionRequest);
			}
		});
	}

	@Override
	public long estimateDelay() {
		return 0;
	}

	@Override
	public void addReceiver(ActionReceiver receiver) {
		actionReceivers.add(receiver);
	}

	@Override
	public void dispose() {
		server.stop();
	}
	
	@Override
	public void received(Connection connection, Object object) {
		if (object instanceof JoinRequest) {
			JoinRequest joinRequest = (JoinRequest) object;
			Player player = new Player(joinRequest.playerId, joinRequest.name, joinRequest.champ); // input map not relevant for remote players
			addPlayer(player);
		} else if (object instanceof LeaveRequest) {
			LeaveRequest leaveRequest = (LeaveRequest) object;
			removePlayer(leaveRequest.playerId);
		} else if (object instanceof ActionRequest) {
			ActionRequest actionRequest = (ActionRequest) object;
			dispatchAction(actionRequest);
		}
	}

	@Override
	public void addLobbyUpdateListener(GeneralListener updateListener) {
		lobbyUpdateListeners.add(updateListener);
	}

}
