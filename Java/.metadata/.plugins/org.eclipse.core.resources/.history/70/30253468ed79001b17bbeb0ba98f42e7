package ui;

import java.awt.AWTEvent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.AWTEventListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

import game.Game;
import graphics.swing.JImage;
import net.miginfocom.swing.MigLayout;

public class GameContainer extends MenuPanel implements AWTEventListener, MouseListener, MouseMotionListener {
	private static final long serialVersionUID = 1L;
	
	private Game game = null;
	
	private JPanel pauseMenu;
	private JPanel gameOverMenu;
	
	private MenuLabel timeLabel = new MenuLabel("", SwingConstants.CENTER);
	
	public GameContainer() {
		super(new MigLayout("fill", "[grow, center]", "[grow, center]"));
		
		// initialise pause menu
		pauseMenu = new JPanel(new MigLayout("wrap 1, gap 50px, insets 50px", "[grow, fill]", ""));
		pauseMenu.setOpaque(false);
		pauseMenu.add(new MenuButton("RESUME", e -> togglePause()));
		pauseMenu.add(new MenuButton("RESTART", e -> {
			removeAll();
			disposeGame();
		}));
		pauseMenu.add(new MenuButton("GIVE UP", e -> {
			removeAll();
			game.gameOver = true;
		}));
		pauseMenu.setBorder(BorderFactory.createLineBorder(new Color(53, 35, 23, 100), 5));
		
		// initialise game over menu
		gameOverMenu = new JPanel(new MigLayout("wrap 1, gap 50px, insets 50px", "[grow, fill]", ""));
		gameOverMenu.setOpaque(false);
		JImage virusImage = new JImage(Assets.VIRUS_ICON);
		virusImage.setPreferredSize(new Dimension(100, 100));
		gameOverMenu.add(virusImage);
		gameOverMenu.add(new MenuLabel("GAME OVER", 60f, SwingConstants.CENTER));
		gameOverMenu.add(timeLabel);
		gameOverMenu.add(new MenuButton("RESTART", e -> {
			removeAll();
			disposeGame();
		}));
		gameOverMenu.add(new MenuButton("EXIT", e -> {
			removeAll();
			disposeGame();
			Frame.show(Frame.MAIN_MENU);
		}));
		gameOverMenu.setBorder(BorderFactory.createLineBorder(new Color(53, 35, 23, 100), 5));
		
		getToolkit().addAWTEventListener(this, AWTEvent.KEY_EVENT_MASK);
	}
	
	private void disposeGame() {
		removeMouseListener(game);
		removeMouseMotionListener(game);
		game = null;
	}
	
	private void createGame() {
		game = new Game();
		addMouseListener(game);
		addMouseMotionListener(game);
	}
	
	private void togglePause() {
		if (game != null && !game.gameOver) {
			game.paused = !game.paused;
			removeAll();
			if (game.paused) add(pauseMenu);
			revalidate();
		}
	}

	
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		if (game == null) {
			createGame();
		}
		
		game.update();
		
		if (game.gameOver && !gameOverMenu.isDisplayable()) {
			removeAll();
			timeLabel.setText("You survived for " + game.getTimeString() + " minutes");
			add(gameOverMenu);
			revalidate();
		}

		int size = Math.min(getWidth(), getHeight());
		Rectangle gameArea = getGameArea();
		Graphics2D gameGraphics = (Graphics2D) g.create((getWidth() - size) / 2, (getHeight() - size) / 2, size, size);
		game.render(gameGraphics, size);
		gameGraphics.dispose();
		
		if (getComponentCount() > 0) {
			g.setColor(new Color(0, 0, 0, 100));
			g.fillRect((getWidth() - size) / 2, (getHeight() - size) / 2, size, size);
		}
	}
	
	private Rectangle getGameArea() {
		int size = Math.min(getWidth(), getHeight());
		return new Rectangle((getWidth() - size) / 2, (getHeight() - size) / 2, size, size);
	}

	@Override
	public void eventDispatched(AWTEvent event) {
		if (event instanceof KeyEvent) {
			KeyEvent keyEvent = (KeyEvent) event;
			if (keyEvent.getID() == KeyEvent.KEY_RELEASED) {
				if (keyEvent.getKeyCode() == KeyEvent.VK_ESCAPE && isDisplayable()) {
					togglePause();
				}
			}
		}
	}

	@Override
	public void mousePressed(MouseEvent e) {
		if (game == null) {
			return;
		}

		float x = (e.getX() / (float) getWidth()) * SIZE_IN_METERS;
		float y = (e.getY() / (float) getHeight()) * SIZE_IN_METERS;
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		if (game == null) {
			return;
		}
	}

	@Override
	public void mouseDragged(MouseEvent e) {}

	@Override
	public void mouseClicked(MouseEvent e) {}

	@Override
	public void mouseReleased(MouseEvent e) {}

	@Override
	public void mouseEntered(MouseEvent e) {}

	@Override
	public void mouseExited(MouseEvent e) {}
	
}
