package graphics.swing.colors;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import graphics.swing.SwingUtil;
import util.GeneralListener;

abstract class StyleSetter extends MouseAdapter implements FocusListener {

		private Component component;

		private Color normalColor, hoveredColor, clickedColor, selectedColor;

		private GeneralListener changeListener;

		private boolean isHovered;
		private boolean isSelected;
		private boolean isClicked;

		public StyleSetter(Component component, Object normalColor, Color hoveredColor, Color clickedColor, Color selectedColor, GeneralListener changeListener) {
			this.component = component;
			this.normalColor = normalColor;
			this.hoveredColor = hoveredColor;
			this.clickedColor = clickedColor;
			this.selectedColor = selectedColor;
			this.changeListener = changeListener;

			SwingUtil.addRecursiveMouseListener(component, this);
			component.addFocusListener(this);
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			isClicked = false;
			updateColor();
		}

		@Override
		public void mousePressed(MouseEvent e) {
			isClicked = true;
			updateColor();
		}

		@Override
		public void mouseExited(MouseEvent e) {
			isHovered = false;
			updateColor();
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			isHovered = true;
			updateColor();
		}

		@Override
		public void focusGained(FocusEvent e) {
			isSelected = true;
			updateColor();
		}

		@Override
		public void focusLost(FocusEvent e) {
			isSelected = false;
			updateColor();
		}

		private void updateColor() {
			if (isClicked && clickedColor != null) {
				setColor(component, clickedColor);
			} else if (isSelected && selectedColor != null) {
				setColor(component, selectedColor);
			} else if (isHovered && hoveredColor != null) {
				setColor(component, hoveredColor);
			} else {
				setColor(component, normalColor);
			}
			if (changeListener != null) changeListener.actionPerformed();
		}
		
		abstract void setColor(Component component, Color color);

	}